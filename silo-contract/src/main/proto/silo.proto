//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;
option java_multiple_files = true;
import "google/protobuf/timestamp.proto";

// status responses
enum Status {
    NOK = 0;
    OK = 1;
    ID_DUPLICATED = 2;
}

// type of object
enum TypeObject {
    PERSON = 0;
    CAR = 1;
}

// observation
message Observation {
    TypeObject type = 1;
    string id = 2;
    google.protobuf.Timestamp date_time = 3;
}

// coordinates
message Coordinates {
    double lat = 1;
    double long = 2;;
}

// cam_join
message CamJoinRequest {
    string camName = 1;
    Coordinates coordinates = 2;
}

message CamJoinResponse {
    Status status = 1;
}

// cam_info
message CamInfoRequest {
    string camName = 1;
}

message CamInfoResponse {
    Coordinates coordinates = 1;
}

// report
message ReportRequest {
    string camName = 1;
    repeated Observation observation = 2;
}

message ReportResponse {
    Status status = 1;
}

// track
message TrackRequest {
    TypeObject type = 1;
    string id = 2;
}

message TrackResponse {
    Observation observation = 1;
}

// track match
message TrackMatchRequest {
    TypeObject type = 1;
    string partialId = 2;
}

message TrackMatchResponse {
    repeated Observation observation = 1;
}

// trace
message TraceRequest {
    TypeObject type = 1;
    string id = 2;
}

message TraceResponse {
    repeated Observation observation = 1;
}

// ctrl_ping
message CtrlPingRequest {
    string input = 1;
}

message CtrlPingResponse {
    string output = 1;
}

// ctrl_clear
message CtrlClearRequest {
    // No arguments
}

message CtrlClearResponse {
    Status status = 1;
}

// ctrl_init
message CtrlInitRequest {
    // TODO LATER
}

message CtrlInitResponse {
    Status status = 1;
}

// service
service Silo {
    rpc CamJoin(CamJoinRequest)         returns (CamJoinResponse);
    rpc CamInfo(CamInfoRequest)         returns (CamInfoResponse);
    rpc Report(ReportRequest)           returns (ReportResponse);
    rpc Track(TrackRequest)             returns (TrackResponse);
    rpc TrackMatch(TrackMatchRequest)   returns (TrackMatchResponse);
    rpc Trace(TraceRequest)             returns (TraceResponse);
    rpc CtrlPing(CtrlPingRequest)       returns (CtrlPingResponse);
    rpc CtrlClear(CtrlClearRequest)     returns (CtrlClearResponse);
    rpc CtrlInit(CtrlInitRequest)       returns (CtrlInitResponse);
}